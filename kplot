#!/usr/bin/python3

# Required library imports
import sys
import io
import pandas as pd
import math
import matplotlib.pyplot as plt
import argparse


########################
# User-Defined Functions            
########################

def is_number(s: str) -> bool:
    """
    Check if a string is a number.
    
    Args:
        s: String to check
    Returns:
        bool: True if string is a number, False otherwise
    """
    try:
        float(s)
        return True
    except ValueError:
        return False


def parse_arguments():
    """
    Parse command-line arguments for the plotting script.
    
    Returns:
        argparse.Namespace: Parsed command-line arguments with the following options:
            -k: Columns to plot (required)
            -b: X-axis column (required)
            -v: Vertical line positions (optional)
            -l: Legend labels (optional)
            -t: Plot title (optional)
            -f: Flag to treat x-axis as categorical (optional)
    """
    parser = argparse.ArgumentParser(description="Plot specified columns from input data")

    # Define required arguments
    parser.add_argument("-k", required=True, metavar='<col1,col2, ..>', 
        help="Columns to plot (comma-separated, 1-indexed)")
    parser.add_argument("-b", required=True, metavar='col', 
        help="Column to use as x-axis (1-indexed)")

    # Define optional arguments
    parser.add_argument("-v", metavar='xaxis_value[,xaxis_value,...]', 
        help="Position(s) of vertical line(s) on plot (comma-separated)")
    parser.add_argument("-l", metavar='<legend1,legend2,..>', 
        help="Legend labels (comma-separated)")
    parser.add_argument("-t", metavar='title', help="Plot title")
    parser.add_argument("-f", action="store_true", 
        help="Treat x-axis as categorical")
    
    return parser.parse_args()


########################
# MAIN PROGRAM
########################
if __name__ == "__main__":
    # Parse and process command line arguments
    args = parse_arguments()

    # Convert 1-indexed column specifications to 0-indexed for pandas
    cols_indx = [int(x) - 1 for x in args.k.split(",")]
    base_indx = int(args.b) - 1
    vbar_locs = args.v.split(',') if args.v else None
    user_legend = args.l.split(",") if args.l else None
    

    #---------------------
    # Data Input Processing
    #---------------------

    # Read first line and determine if it's a header
    first_line = sys.stdin.readline().strip()
    has_header = not any(is_number(x) for x in first_line.split())
    
    # Read all data
    data = pd.read_csv(
        io.StringIO(first_line + '\n' + sys.stdin.read()),
        sep='\s+',
        header=0 if has_header else None
    )
    
    # Add default column names if needed
    if not has_header:
        data.columns = [f'var{i}' for i in range(data.shape[1])]


    #---------------------
    # Data Visualization
    #---------------------
    fig, ax = plt.subplots()
    
    # Determine x-axis values
    x_values = data.iloc[:, base_indx]

    if isinstance(x_values.iloc[0], str) or args.f:
        x_values = x_values.astype(str)
        label_span = math.ceil(len(x_values) / 40)
        plt.xticks(range(len(x_values))[::label_span], x_values[::label_span], rotation=90)
    
    # Plot data
    ax.plot(x_values if not isinstance(x_values.iloc[0], str) else range(len(x_values)),
    data.iloc[:, cols_indx],
    marker='.')

    # Add zero line 
    ax.axhline(y=0, color='black', ls='-', alpha=0.3)
    

    # Add vertical reference lines
    if vbar_locs:
        for loc in vbar_locs:
            ax.axvline(x=x_values.tolist().index(loc) if isinstance(x_values.iloc[0], str) else float(loc),
                      color='red', ls='-', alpha=0.5)

    # Add legend and title
    ax.legend(user_legend if user_legend else data.columns[cols_indx])
    ax.set_title(args.t or "")

    # Display plot
    plt.subplots_adjust(bottom=0.15)
    plt.show()

