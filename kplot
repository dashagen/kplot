#!/usr/bin/python3

# Required library imports
import sys
import io
import pandas as pd
import math
import matplotlib.pyplot as plt
import argparse

########################
# User-Defined Functions            
########################

def is_number(s):
    """
    Check if a string is a number.
    
    Args:
        s: String to check
    Returns:
        bool: True if string is a number, False otherwise
    """
    try:
        float(s)
        return True
    except ValueError:
        return False


def parse_arguments():
    """
    Parse command-line arguments for the plotting script.
    
    Returns:
        argparse.Namespace: Parsed command-line arguments with the following options:
            -k: Columns to plot (required)
            -b: X-axis column (required)
            -v: Vertical line positions (optional)
            -l: Legend labels (optional)
            -t: Plot title (optional)
            -f: Flag to treat x-axis as categorical (optional)
    """
    parser = argparse.ArgumentParser(description="Plot specified columns from input data")

    # Define required arguments
    parser.add_argument("-k", required=True, metavar='<col1,col2, ..>', 
        help="Columns to plot (comma-separated, 1-indexed)")
    parser.add_argument("-b", required=True, metavar='col', 
        help="Column to use as x-axis (1-indexed)")

    # Define optional arguments
    parser.add_argument("-v", metavar='xaxis_value[,xaxis_value,...]', 
        help="Position(s) of vertical line(s) on plot (comma-separated)")
    parser.add_argument("-l", metavar='<legend1,legend2,..>', 
        help="Legend labels (comma-separated)")
    parser.add_argument("-t", metavar='title', help="Plot title")
    parser.add_argument("-f", action="store_true", 
        help="Treat x-axis as categorical")
    
    return parser.parse_args()


########################
# MAIN PROGRAM
########################
if __name__ == "__main__":
    # Parse and process command line arguments
    args = parse_arguments()

    # Convert 1-indexed column specifications to 0-indexed for pandas
    cols_indx = [int(x) - 1 for x in args.k.split(",")]  # Columns to plot
    base_indx = int(args.b) - 1                          # X-axis column
    vbar_locs = args.v.split(',') if args.v else None    # Vertical line positions
    user_legend = args.l.split(",") if args.l else None  # Legend labels
    title = args.t if args.t else ""                     # Plot title

    #---------------------
    # Data Input Processing
    #---------------------
    # Read first line to determine if there's a header
    first_line = sys.stdin.readline()
    header_opt = False

    # Determine if the first line is header or data
    if header_opt:
        header = 0
    elif True in [is_number(x) for x in first_line.split()]:
        header = None  # First line contains data
    else:
        header = 0    # First line is header
        header_opt = True

    # Combine first line with remaining input
    remaining_content = sys.stdin.read()
    content = first_line + remaining_content
    content_buffer = io.StringIO(content)

    # Read data into pandas DataFrame
    df = pd.read_csv(content_buffer, sep='\s+', header=header)

    # Generate column names if no header present
    if header_opt is False:
        df.columns = ['var' + str(i) for i in range(df.shape[1])]

    #---------------------
    # Data Visualization
    #---------------------
    # Handle categorical x-axis (string values or -f flag)
    if (isinstance(df.iloc[0, base_indx], str) or args.f):
        # Convert x-values to strings and create line plot
        xseries = [str(x) for x in df.iloc[:, base_indx]]
        label_span = math.ceil(df.shape[0] / 40)  # Calculate label spacing
        plt.plot(xseries, df.iloc[:, cols_indx], marker=".")
        plt.xticks(xseries[::label_span], rotation=90)
    else:
        # Create numeric scatter plot
        plt.plot(df.iloc[:, base_indx], df.iloc[:, cols_indx], marker=".")

    # Add horizontal zero line for reference
    plt.axhline(y=0, color='black', ls='-', alpha=0.3)

    # Add vertical lines if specified
    if vbar_locs is not None:
        for vbar_loc in vbar_locs:
            if (isinstance(df.iloc[0, base_indx], str) or args.f):
                plt.axvline(x=vbar_loc, color='red', ls='-', alpha=0.5)
            else:
                plt.axvline(x=float(vbar_loc), color='red', ls='-', alpha=0.5)

    # Add legend with user-specified or default labels
    if user_legend:
        plt.legend(user_legend)
    else:
        plt.legend(df.columns[cols_indx])

    # Adjust plot layout and display
    plt.subplots_adjust(bottom=0.15)  # Ensure x-labels are visible
    plt.title(title)
    plt.show()

