#!/usr/bin/python3
import sys
import io
import os
import pandas as pd
import getopt
import math
import matplotlib.pyplot as plt


########################
# UDF's            
########################

# is_number function
def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        return False


########################
# MAIN PROGRAM
########################
if __name__ == "__main__":


    #---------------------
    # argument parsing
    #---------------------

    # Help line
    help_line = os.path.basename(sys.argv[0]) + " -k<col1, col2,..>  -b<label/x col> -f"

    #  Parse inputs
    header_opt = False

    argv = sys.argv[1:]

    try:
        opts, args = getopt.getopt(argv,"hk:b:f")
    except getopt.GetoptError:
        print(help_line)
        sys.exit(2)

    # check if k, b options are used
    all_options = [t[0] for t in opts]

    if set(["-k", "-b"]).issubset(set(all_options)) is False:
        print(help_line)
        sys.exit(2)

    # parse all options
    for opt, arg in opts:
        if opt == '-h':
            print(help_line)
            sys.exit()
        elif opt in ("-k"):
            cols_indx = [int(x)-1 for x in arg.split(",")]
        elif opt in ("-b"):
            base_indx = int(arg) - 1
    
    #---------------------
    # stdin processing
    #---------------------

    # Read the first line from stdin
    first_line = sys.stdin.readline()

    # Determine if there's a header
    if header_opt:
        header = 0
    elif True in [is_number(x) for x in first_line.split()]:
        header = None
    else:
        header = 0
        header_opt = True

    # Read the remaining content and prepend the first line
    remaining_content = sys.stdin.read()
    content = first_line + remaining_content

    # Create a file-like buffer with the content
    content_buffer = io.StringIO(content)

    # Read the data into a DataFrame
    df = pd.read_csv(content_buffer, sep='\s+', header=header)

    # Assign column names if there is no header
    if header_opt is False:
        df.columns = [ 'var' + str(i) for i in range(df.shape[1])]

    #---------------------
    # Plotting
    #---------------------
    ##### plot
    if ( '-f' in all_options):
        xseries = [str(x) for x in df.iloc[:, base_indx]]
        label_span = math.ceil(df.shape[0] / 40)
        plt.plot(xseries, df.iloc[:, cols_indx ], marker=".") 
        plt.xticks(xseries[::label_span],  rotation=90)
    else:
        plt.plot(df.iloc[:, base_indx], df.iloc[:, cols_indx], marker=".") 
    
    plt.legend(df.columns[cols_indx])
    plt.subplots_adjust(bottom=0.15)
    plt.show()


